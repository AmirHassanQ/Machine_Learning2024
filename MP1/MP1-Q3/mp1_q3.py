# -*- coding: utf-8 -*-
"""MP1_Q3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16AIx3Nyrw7BOvbuj9714TUmp2W486QwZ

#Q3_1
"""

import pandas as pd
import numpy as np
from matplotlib import pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split

# https://drive.google.com/file/d/1lZOjX6bOfI9PYv8l1exXiYHKUp6eM760/view?usp=sharing
!gdown 1lZOjX6bOfI9PYv8l1exXiYHKUp6eM760

w = pd.read_csv('/content/weatherHistory.csv')

from matplotlib import pyplot as plt
w['Temperature (C)'].plot(kind='hist', bins=20, title='Temperature (C)')
plt.gca().spines[['top', 'right',]].set_visible(False)
plt.savefig('h Temperture')

w['Apparent Temperature (C)'].plot(kind='hist', bins=20, title='Apparent Temperature (C)')
plt.gca().spines[['top', 'right',]].set_visible(False)
plt.savefig('h Apparent Temperature (C)')

w['Humidity'].plot(kind='hist', bins=20, title='Humidity')
plt.gca().spines[['top', 'right',]].set_visible(False)
plt.savefig('h Humidity')

w['Wind Speed (km/h)'].plot(kind='hist', bins=20, title='Wind Speed (km/h)')
plt.gca().spines[['top', 'right',]].set_visible(False)
plt.savefig('h Wind Speed')

w['Wind Bearing (degrees)'].plot(kind='hist', bins=20, title='Wind Bearing (degrees)')
plt.gca().spines[['top', 'right',]].set_visible(False)
plt.savefig('h Wind Bearing (degrees)')

w['Visibility (km)'].plot(kind='hist', bins=20, title='Visibility (km)')
plt.gca().spines[['top', 'right',]].set_visible(False)
plt.savefig('h Visibility (km)')

w['Loud Cover'].plot(kind='hist', bins=20, title='Loud Cover')
plt.gca().spines[['top', 'right',]].set_visible(False)
plt.savefig('h Loud Cover.png')

w['Pressure (millibars)'].plot(kind='hist', bins=20, title='Pressure (millibars)')
plt.gca().spines[['top', 'right',]].set_visible(False)
plt.savefig('h Pressure (millibars)')

w_np = np.array(w)
nw = pd.DataFrame(w_np[: , 3:11])

plt.figure(figsize=(12, 8))  # Adjust figure size as needed
for column in nw.columns:
    plt.hist(nw[column], bins=20, alpha=1, label=column)
plt.xlabel('Value')
plt.ylabel('Frequency')
plt.title('Histograms of weatherdata')
plt.legend(['Temperature (C)','Apparent Temperature (C)','Humidity','Wind Speed (km/h)','Wind Bearing (degrees)','Visibility (km)','Loud Cover','Pressure (millibars)'])
plt.savefig('Histogram ')
plt.show()

correlation_matrix = nw.corr()

axis_corr = sns.heatmap(correlation_matrix ,annot=True, cmap = 'Blues')

plt.show()
plt.savefig('heatmap.png')

"""#Q3_2

***LS***
"""

import statsmodels.formula.api as sm
from sklearn.model_selection import train_test_split

plt.scatter(w["Temperature (C)"],w["Humidity"],color='b',marker='.')
plt.title('Humidity & Temperature (C)')
plt.ylabel('Humidity')
plt.xlabel('Temperature (C)')
plt.grid(False)

mod=sm.ols(formula='w["Humidity"]~w["Temperature (C)"]',data=w)
res=mod.fit()
print(res.summary())

plt.scatter(w["Temperature (C)"],w["Humidity"],color='b',marker='.')
plt.plot(w["Temperature (C)"], 0.8893-0.0129*w["Temperature (C)"],color='black')
plt.title('Humidity & Temperature (C)')
plt.ylabel('Humidity')
plt.xlabel('Temperature (C)')
plt.grid(False)

plt.scatter(w["Humidity"],w["Temperature (C)"],color='b',marker='.')
plt.title('Humidity & Temperature (C)')
plt.xlabel('Humidity')
plt.ylabel('Temperature (C)')
plt.grid(False)

mod=sm.ols(formula='w["Temperature (C)"]~w["Humidity"]',data=w)
res=mod.fit()
print(res.summary())

plt.scatter(w["Humidity"],w["Temperature (C)"],color='b',marker='.')
plt.plot(w["Humidity"], 34.6369-30.8944*w["Humidity"],color='red')
plt.title('Humidity & Temperature (C)')
plt.xlabel('Humidity')
plt.ylabel('Temperature (C)')
plt.grid(False)

class LinearRegressionLS:
    def __init__(self):
        self.coefficients = None

    def fit(self, X, y):
        # Add a column of ones to account for the intercept term
        X = np.column_stack((np.ones(len(X)), X))

        # Compute the coefficients using the least squares method
        self.coefficients = np.linalg.inv(X.T.dot(X)).dot(X.T).dot(y)

    def predict(self, X):
        # Add a column of ones to account for the intercept term
        X = np.column_stack((np.ones(len(X)), X))

        # Predict the target variable
        return X.dot(self.coefficients)

y1 = w['Temperature (C)']
X1 = w['Humidity']

model = LinearRegressionLS()
model.fit(X1, y1)
y_pred1 = model.predict(X1)

def mse(x_trai,y_test):
  m = np.mean((y_test- model.predict(X1))**2)
  print("Mean Squared Error:", m)
mse(X1,y1)

plt.scatter(X1, y1, label='Data')
plt.plot(X1, y_pred1, color='black', label='LS Regression Line')
plt.xlabel('Humidity')
plt.ylabel('Temperature')
plt.title('Temperature vs Humidity (LS)')
plt.legend()
plt.savefig('LS.png')
plt.show()

"""***RLS***"""

from sklearn.linear_model import SGDRegressor


class RecursiveLeastSquares:
    def __init__(self, n_features, forgetting_factor=1.0):
        self.n_features = n_features
        self.forgetting_factor = forgetting_factor
        self.theta = np.zeros((n_features, 1))
        self.P = np.eye(n_features)

    def update(self, x, y):
        x = np.atleast_2d(x)
        y = np.atleast_1d(y)


        err = y - np.dot(x, self.theta)


        K = np.dot(self.P, x.T) / (self.forgetting_factor + np.dot(np.dot(x, self.P), x.T))


        self.theta += np.dot(K, err)
        self.P = (1 / self.forgetting_factor) * (self.P - np.dot(K, np.dot(x, self.P)))

    def error(self , x , y):
        x = np.atleast_2d(x)
        y = np.atleast_1d(y)


        err = y - np.dot(x, self.theta)
        return err
    def predict(self, x):
        x = np.atleast_2d(x)
        return np.dot(x, self.theta)

import pandas as pd
import matplotlib.pyplot as plt

X = w['Humidity'].values.reshape(-1, 1)
y = w['Temperature (C)'].values

model = RecursiveLeastSquares(n_features=1)
err_list = []

for i in range(len(X)):
    model.update(X[i], y[i])
    err_list.append(model.error(X[i] , y[i]))



y_pred = [model.predict(x)[0, 0] for x in X]


mse = np.mean(np.array(err_list)**2)
print("Mean Squared Error:", mse)
plt.scatter(X, y, label='Data')
plt.plot(X, y_pred, color='black', label='RLS Regression Line')
plt.xlabel('Humidity')
plt.ylabel('Temperature')
plt.title('Temperature vs Humidity (RLS)')
plt.legend()
plt.savefig('RLS.png')
plt.show()

"""#Q3_3

***WLS***
"""

import numpy as np
import matplotlib.pyplot as plt
X = w['Humidity'].values.reshape(-1, 1)
y = w['Temperature (C)'].values

weights = np.linspace(0.1, 1, len(y))


W = np.diag(weights)
X_weighted = np.dot(W, X)
y_weighted = np.dot(W, y)
coefficients = np.linalg.inv(X_weighted.T.dot(X_weighted)).dot(X_weighted.T).dot(y_weighted)


y_pred = X.dot(coefficients)
mse = np.mean((y - y_pred)**2)
print("Mean Squared Error:", mse)

plt.scatter(X, y, label='Data')
plt.plot(X, y_pred, color='k', label='Weighted Least Squares Regression Line')
plt.xlabel('Humidity')
plt.ylabel('Temperature')
plt.title('Temperature vs Humidity (Weighted Least Squares)')
plt.legend()
plt.show()